diff -Nur a/groupsock/GroupsockHelper.cpp c/groupsock/GroupsockHelper.cpp
--- a/groupsock/GroupsockHelper.cpp	2019-02-14 10:15:51.576511413 +0800
+++ c/groupsock/GroupsockHelper.cpp	2019-02-14 10:29:37.565525344 +0800
@@ -174,6 +175,20 @@
     }
   }
 
+  struct linger   linger  = {0};
+  linger.l_onoff  = 1;
+  linger.l_linger = 0;
+  if ( 0!= setsockopt(newSocket, SOL_SOCKET, SO_LINGER, (const char *) &linger, sizeof(linger)) )
+  {
+      socketErr(env, "setsockopt error ");
+  }
+  
+  int on  = 1;
+  if ( 0!= setsockopt(newSocket, IPPROTO_TCP, TCP_NODELAY, (const char *) &on, sizeof(on)) )
+  {
+      socketErr(env, "setsockopt error ");
+  }
+
   return newSocket;
 }
 
@@ -281,6 +296,19 @@
       return -1;
     }
   }
+  struct linger   linger  = {0};
+  linger.l_onoff  = 1;
+  linger.l_linger = 0;
+  if ( 0!= setsockopt(newSocket, SOL_SOCKET, SO_LINGER, (const char *) &linger, sizeof(linger)) )
+  {
+      socketErr(env, "setsockopt error");
+  }
+  
+  int on  = 1;
+  if ( 0!= setsockopt(newSocket, IPPROTO_TCP, TCP_NODELAY, (const char *) &on, sizeof(on)) )
+  {
+      socketErr(env, "setsockopt error ");
+  }
 
   return newSocket;
 }
diff -Nur a/liveMedia/include/RTSPClient.hh c/liveMedia/include/RTSPClient.hh
--- a/liveMedia/include/RTSPClient.hh	2019-02-14 10:15:51.576511413 +0800
+++ c/liveMedia/include/RTSPClient.hh	2019-02-14 10:29:37.561525340 +0800
@@ -144,6 +144,12 @@
       // Issues an aggregate RTSP "SET_PARAMETER" command on "session", then returns the "CSeq" sequence number that was used in the command.
       // (The "responseHandler" and "authenticator" parameters are as described for "sendDescribeCommand".)
 
+  unsigned sendSetParameterCommand2(MediaSession& session, responseHandler* responseHandler,
+             char const* paramString,
+             Authenticator* authenticator);
+               
+  int sendBidAudio(char *audioBuf, int bufSize);
+
   unsigned sendGetParameterCommand(MediaSession& session, responseHandler* responseHandler, char const* parameterName,
 				   Authenticator* authenticator = NULL);
       // Issues an aggregate RTSP "GET_PARAMETER" command on "session", then returns the "CSeq" sequence number that was used in the command.
@@ -193,6 +199,12 @@
   static unsigned responseBufferSize;
 
 public: // Some compilers complain if this is "private:"
+  int rtspUDPLocalPort;
+  int rtpWanPort;
+  int rtpAudioPort;
+  char wanip[15];
+  int track;
+  unsigned short serverPort;
   // The state of a request-in-progress:
   class RequestRecord {
   public:
diff -Nur a/liveMedia/MediaSession.cpp c/liveMedia/MediaSession.cpp
--- a/liveMedia/MediaSession.cpp	2019-02-14 10:15:51.560511387 +0800
+++ c/liveMedia/MediaSession.cpp	2019-02-14 10:29:37.549525328 +0800
@@ -692,7 +692,7 @@
       // The sockets' port numbers were specified for us.  Use these:
       Boolean const protocolIsRTP = strcmp(fProtocolName, "RTP") == 0;
       if (protocolIsRTP && !fMultiplexRTCPWithRTP) {
-	fClientPortNum = fClientPortNum&~1;
+	//fClientPortNum = fClientPortNum&~1;
 	    // use an even-numbered port for RTP, and the next (odd-numbered) port for RTCP
       }
       if (isSSM()) {
@@ -711,7 +711,8 @@
 	  fRTCPSocket = fRTPSocket;
 	} else {
 	  // Set our RTCP port to be the RTP port + 1:
-	  portNumBits const rtcpPortNum = fClientPortNum|1;
+	  //portNumBits const rtcpPortNum = fClientPortNum|1;
+    portNumBits const rtcpPortNum = fClientPortNum+1;
 	  if (isSSM()) {
 	    fRTCPSocket = new Groupsock(env(), tempAddr, fSourceFilterAddr, rtcpPortNum);
 	  } else {
diff -Nur a/liveMedia/RTCP.cpp c/liveMedia/RTCP.cpp
--- a/liveMedia/RTCP.cpp	2019-02-14 10:15:51.560511387 +0800
+++ c/liveMedia/RTCP.cpp	2019-02-14 10:29:37.549525328 +0800
@@ -349,7 +349,7 @@
   char nameBytes[4];
   nameBytes[0] = nameBytes[1] = nameBytes[2] = nameBytes[3] = '\0'; // by default
   if (name != NULL) {
-    snprintf(nameBytes, 4, "%s", name);
+    strncpy(nameBytes, name, 4);
   }
   fOutBuf->enqueue((u_int8_t*)nameBytes, 4);
 
@@ -645,7 +645,6 @@
 #endif
 	    break;
 	  }
-	  length -= 4;
 #ifdef DEBUG
 	  fprintf(stderr, "\tname:%c%c%c%c\n", pkt[0], pkt[1], pkt[2], pkt[3]);
 #endif
diff -Nur a/liveMedia/RTPInterface.cpp c/liveMedia/RTPInterface.cpp
--- a/liveMedia/RTPInterface.cpp	2019-02-14 10:15:51.564511393 +0800
+++ c/liveMedia/RTPInterface.cpp	2019-02-14 10:31:29.525816153 +0800
@@ -328,19 +328,37 @@
     framingHeader[1] = streamChannelId;
     framingHeader[2] = (u_int8_t) ((packetSize&0xFF00)>>8);
     framingHeader[3] = (u_int8_t) (packetSize&0xFF);
-    if (!sendDataOverTCP(socketNum, framingHeader, 4, False)) break;
-
-    if (!sendDataOverTCP(socketNum, packet, packetSize, True)) break;
+	  unsigned char *pBuf = NULL;
+      pBuf = (unsigned char *)malloc(packetSize+4);
+      pBuf[0] = framingHeader[0];
+      pBuf[1] = framingHeader[1];
+      pBuf[2] = framingHeader[2];
+      pBuf[3] = framingHeader[3];
+      
+      
+      memcpy(pBuf+4, packet, packetSize);
+      
+      
+      /*for (int i =0; i< packetSize +4; i++) {
+          
+          fprintf(stderr,"%02x ",pBuf[i]);
+      }
+      fprintf(stderr,"\nWANS ==>  \n");
+      
+      fprintf(stderr, "sendRTPorRTCPPacketOverTCP:puf conetnt===>"); fflush(stderr);*/
+      
+      if (!sendDataOverTCP(socketNum, pBuf, packetSize + 4, True)) break;
 #ifdef DEBUG_SEND
     fprintf(stderr, "sendRTPorRTCPPacketOverTCP: completed\n"); fflush(stderr);
 #endif
-
+    free(pBuf);
     return True;
   } while (0);
 
 #ifdef DEBUG_SEND
   fprintf(stderr, "sendRTPorRTCPPacketOverTCP: failed! (errno %d)\n", envir().getErrno()); fflush(stderr);
 #endif
+//  free(pBuf);
   return False;
 }
 
diff -Nur a/liveMedia/RTSPClient.cpp c/liveMedia/RTSPClient.cpp
--- a/liveMedia/RTSPClient.cpp	2019-02-14 10:15:51.560511387 +0800
+++ c/liveMedia/RTSPClient.cpp	2019-02-14 10:29:37.529525308 +0800
@@ -140,6 +140,19 @@
   return result;
 }
 
+unsigned RTSPClient::sendSetParameterCommand2(MediaSession& subsession, responseHandler* responseHandler,
+                                             char const* paramString,
+                                             Authenticator* authenticator) {
+  if (paramString == NULL)
+  {
+      return 0;
+  }
+  if (fCurrentAuthenticator < authenticator) fCurrentAuthenticator = *authenticator;
+
+  unsigned result = sendRequest(new RequestRecord(++fCSeq, "SET_PARAMETER", responseHandler, &subsession, NULL, False, 0.0, 0.0, 0.0, paramString));
+  return result;
+} 
+
 unsigned RTSPClient::sendGetParameterCommand(MediaSession& session, responseHandler* responseHandler, char const* parameterName,
                                              Authenticator* authenticator) {
   if (fCurrentAuthenticator < authenticator) fCurrentAuthenticator = *authenticator;
@@ -198,6 +211,15 @@
   }
 }
 
+int RTSPClient::sendBidAudio(char *audioBuf, int bufSize)
+{
+    if (audioBuf == NULL || bufSize <= 0 || fOutputSocketNum < 0)
+    {
+        return -1;
+    }
+    return send(fOutputSocketNum, audioBuf, bufSize, 0);
+}
+
 Boolean RTSPClient::changeResponseHandler(unsigned cseq, responseHandler* newResponseHandler) { 
   // Look for the matching request record in each of our 'pending requests' queues:
   RequestRecord* request;
@@ -361,7 +383,7 @@
 RTSPClient::RTSPClient(UsageEnvironment& env, char const* rtspURL,
 		       int verbosityLevel, char const* applicationName,
 		       portNumBits tunnelOverHTTPPortNum, int socketNumToServer)
-  : Medium(env),
+  : Medium(env),track(0),
     desiredMaxIncomingPacketSize(0), fVerbosityLevel(verbosityLevel), fCSeq(1),
     fAllowBasicAuthentication(True), fServerAddress(0),
     fTunnelOverHTTPPortNum(tunnelOverHTTPPortNum),
@@ -470,6 +492,13 @@
     // First, construct command-specific headers that we need:
 
     char* cmdURL = fBaseURL; // by default
+    char *tempindex;
+    if ((tempindex = strstr(cmdURL, "localport0")) != NULL) {
+        *(--tempindex) = '\0';
+    }
+    if (fVerbosityLevel >= 1) {
+        envir() << cmdURL << ".\n";
+    }
     Boolean cmdURLWasAllocated = False;
 
     char const* protocolStr = "RTSP/1.0"; // by default
@@ -543,8 +572,9 @@
       if (fVerbosityLevel >= 1) envir() << "\tThe request was base-64 encoded to: " << cmd << "\n\n";
       delete[] origCmd;
     }
-
-    if (send(fOutputSocketNum, cmd, strlen(cmd), MSG_NOSIGNAL) < 0) {
+    
+    int sendlen = (int)strlen(cmd);
+    if (send(fOutputSocketNum, cmd, sendlen, MSG_NOSIGNAL) < 0) {
       char const* errFmt = "%s send() failed: ";
       unsigned const errLength = strlen(errFmt) + strlen(request->commandName());
       char* err = new char[errLength];
@@ -688,6 +718,8 @@
     // Note: I think the above is nonstandard, but DSS wants it this way
     char const* portTypeStr;
     portNumBits rtpNumber, rtcpNumber;
+    unsigned transportSize;
+    char* transportStr;
     if (streamUsingTCP) { // streaming over the RTSP connection
       transportTypeStr = "/TCP;unicast";
       portTypeStr = ";interleaved";
@@ -699,7 +731,17 @@
 	= IsMulticastAddress(connectionAddress) || (connectionAddress == 0 && forceMulticastOnUnspecified);
       transportTypeStr = requestMulticastStreaming ? ";multicast" : ";unicast";
       portTypeStr = requestMulticastStreaming ? ";port" : ";client_port";
-      rtpNumber = subsession.clientPortNum();
+      if (rtpWanPort == 0) {
+          rtpNumber = subsession.clientPortNum();
+      } else {
+          if (track == 0) {
+              rtpNumber = rtpWanPort;
+              track++;
+          } else if (track == 1) {
+              rtpNumber = rtpAudioPort;
+              track = 0;
+          }
+      }
       if (rtpNumber == 0) {
 	envir().setResultMsg("Client port number unknown\n");
 	delete[] cmdURL;
@@ -707,11 +749,23 @@
       }
       rtcpNumber = subsession.rtcpIsMuxed() ? rtpNumber : rtpNumber + 1;
     }
-    unsigned transportSize = strlen(transportFmt)
-      + strlen(transportTypeStr) + strlen(modeStr) + strlen(portTypeStr) + 2*5 /* max port len */;
-    char* transportStr = new char[transportSize];
-    sprintf(transportStr, transportFmt,
-	    transportTypeStr, modeStr, portTypeStr, rtpNumber, rtcpNumber);
+    if (rtpWanPort != 0) {
+        char destinationStr[100] = {0};
+        memset(destinationStr, 0, 100);
+        sprintf(destinationStr, ";destination=%s;", wanip);
+        transportSize = strlen(transportFmt)
+        + strlen(transportTypeStr) + strlen(modeStr) + strlen(portTypeStr) + 2 * 5 /* max port len */ + strlen(destinationStr);
+        transportStr = new char[transportSize];
+          
+        sprintf(transportStr, transportFmt,
+                  transportTypeStr, modeStr, portTypeStr, rtpNumber, rtcpNumber, destinationStr);
+    } else {   
+        transportSize = strlen(transportFmt)
+          + strlen(transportTypeStr) + strlen(modeStr) + strlen(portTypeStr) + 2*5 /* max port len */;
+        transportStr = new char[transportSize];
+        sprintf(transportStr, transportFmt,
+          transportTypeStr, modeStr, portTypeStr, rtpNumber, rtcpNumber);
+    }
     
     // When sending more than one "SETUP" request, include a "Session:" header in the 2nd and later commands:
     char* sessionStr = createSessionString(fLastSessionId);
@@ -786,7 +840,20 @@
 	      serverAddressString.val(),
 	      fSessionCookie);
     }
-  } else { // "PLAY", "PAUSE", "TEARDOWN", "RECORD", "SET_PARAMETER", "GET_PARAMETER"
+  } else if (strcmp(request->commandName(), "GET_PARAMETER") == 0 
+   || strcmp(request->commandName(), "SET_PARAMETER") == 0){
+      char const* sessionId;
+      if (request->session() != NULL) {
+            sessionId = fLastSessionId;
+      } else {
+            sessionId = request->subsession()->sessionId();
+      }
+      char const* const content_type = "Content-Type: text/plain\r\n";
+      char* sessionStr = createSessionString(sessionId);
+      extraHeaders = new char[strlen(sessionStr) + strlen(content_type)  + 1];
+      extraHeadersWereAllocated = True;
+      sprintf(extraHeaders, "%s%s", sessionStr, content_type);  
+   } else { // "PLAY", "PAUSE", "TEARDOWN", "RECORD", "SET_PARAMETER", "GET_PARAMETER"
     // First, make sure that we have a RTSP session in progress
     if (fLastSessionId == NULL) {
       envir().setResultMsg("No RTSP session is currently in progress\n");
@@ -866,6 +933,61 @@
     portNumBits urlPortNum;
     char const* urlSuffix;
     if (!parseRTSPURL(envir(), fBaseURL, username, password, destAddress, urlPortNum, &urlSuffix)) break;
+    serverPort = (unsigned short)urlPortNum;
+      
+      char *index = 0;
+      rtspUDPLocalPort = 0;
+      if ((index = strstr(strdup(urlSuffix), "rtspport")) != NULL)
+      {
+          index += 8;
+          if (*index == '=') {
+              sscanf(++index, "%d", &rtspUDPLocalPort);
+              if (rtspUDPLocalPort < 1 || rtspUDPLocalPort > 65535) {
+                  envir() << "the udp port " << rtspUDPLocalPort << " is not valid" << "\n";
+                  break;
+              }
+          }
+      }
+      
+      index = 0;
+      rtpWanPort = 0;
+      if ((index = strstr(strdup(urlSuffix), "wanport0")) != NULL)
+      {
+          index += 8;
+          if (*index == '=') {
+              sscanf(++index, "%d", &rtpWanPort);
+              if (rtpWanPort < 1 || rtpWanPort > 65535) {
+                  envir() << "the rtpwan port " << rtpWanPort << " is not valid" << "\n";
+                  break;
+              }
+          }
+      }
+      
+      index = 0;
+      rtpAudioPort = 0;
+      if ((index = strstr(strdup(urlSuffix), "wanport1")) != NULL) {
+          index += 8;
+          if (*index == '=') {
+              sscanf(++index, "%d", &rtpAudioPort);
+              if (rtpAudioPort < 1 || rtpAudioPort > 65535) {
+                  envir() << "the rtpwan port " << rtpAudioPort << " is not valid" << "\n";
+              }
+          }
+      }
+      
+      index = 0;
+      if ((index = strstr(strdup(urlSuffix), "wanip")) != NULL)
+      {
+          index += 5;
+          if (*index == '=') {
+              sscanf(++index, "%s", wanip);
+              envir() << "wanip is " << wanip << ".\n";
+          }
+      }
+      
+      if (fVerbosityLevel >= 1) {
+          envir() << "urlSuffix is " << urlSuffix << ".\n";
+      }
     portNumBits destPortNum = fTunnelOverHTTPPortNum == 0 ? urlPortNum : fTunnelOverHTTPPortNum;
     if (username != NULL || password != NULL) {
       fCurrentAuthenticator.setUsernameAndPassword(username, password);
@@ -873,8 +995,12 @@
       delete[] password;
     }
     
-    // We don't yet have a TCP socket (or we used to have one, but it got closed).  Set it up now.
-    fInputSocketNum = setupStreamSocket(envir(), 0);
+    if (rtspUDPLocalPort == 0) {
+      // We don't yet have a TCP socket (or we used to have one, but it got closed).  Set it up now.
+      fInputSocketNum = fOutputSocketNum = setupStreamSocket(envir(), 0);
+    } else {
+      fInputSocketNum = fOutputSocketNum = setupDatagramSocket(envir(), rtspUDPLocalPort);
+    }
     if (fInputSocketNum < 0) break;
     ignoreSigPipeOnSocket(fInputSocketNum); // so that servers on the same host that get killed don't also kill us
     if (fOutputSocketNum < 0) fOutputSocketNum = fInputSocketNum;

